import os
import streamlit as st
from langchain.chat_models import ChatOpenAI
from langchain.schema import SystemMessage, HumanMessage
import google.generativeai as genai

os.environ['GOOGLE_API_KEY'] = "AIzaSyDvAJcT-nTowltjiLbZI73-n08gpTunYWo"
os.environ['OPENAI_API_KEY'] = "AIzaSyDvAJcT-nTowltjiLbZI73-n08gpTunYWo"

genai.configure(api_key=os.environ['AIzaSyDvAJcT-nTowltjiLbZI73-n08gpTunYWo'])

def fetch_travel_options(source, destination):
    model = genai.GenerativeModel("gemini-pro")
    prompt = f"Suggest travel options from {source} to {destination}, including flights, trains, buses, and taxis with estimated costs."
    response = model.generate_content(prompt)
    return response.text if response else "No response from AI."

def fetch_travel_options_langchain(source, destination):
    llm = ChatOpenAI(model_name="gpt-4")
    messages = [
        SystemMessage(content="You are an AI travel assistant providing optimal travel routes."),
        HumanMessage(content=f"Find the best travel options from {source} to {destination} with estimated costs.")
    ]
    response = llm(messages)
    return response.content

st.title(" AI-Powered Travel Planner ")
st.write("Plan your trips smartly with AI-generated travel recommendations!")

source = st.text_input("Enter Source Location:")
destination = st.text_input("Enter Destination Location:")

if st.button("Find Travel Options"):
    if source and destination:
        with st.spinner("Fetching travel options..."):
            travel_info_gemini = fetch_travel_options(source, destination)
            travel_info_langchain = fetch_travel_options_langchain(source, destination)
            
            st.success(" Here are your AI-generated travel options:")
            st.subheader("Google Gemini AI Suggestions:")
            st.write(travel_info_gemini)

            st.subheader(" Suggestions:")
            st.write(travel_info_langchain)
    else:
        st.error("Please enter both source and destination.")

st.markdown("---")
st.write("Powered by mj")
